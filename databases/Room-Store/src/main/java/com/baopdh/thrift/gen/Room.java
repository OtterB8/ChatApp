/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baopdh.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-26")
public class Room implements org.apache.thrift.TBase<Room, Room._Fields>, java.io.Serializable, Cloneable, Comparable<Room> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Room");

  private static final org.apache.thrift.protocol.TField USER1_FIELD_DESC = new org.apache.thrift.protocol.TField("user1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER2_FIELD_DESC = new org.apache.thrift.protocol.TField("user2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastMessage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RoomStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RoomTupleSchemeFactory();

  public int user1; // required
  public int user2; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String lastMessage; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER1((short)1, "user1"),
    USER2((short)2, "user2"),
    LAST_MESSAGE((short)3, "lastMessage"),
    TIMESTAMP((short)4, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER1
          return USER1;
        case 2: // USER2
          return USER2;
        case 3: // LAST_MESSAGE
          return LAST_MESSAGE;
        case 4: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER1_ISSET_ID = 0;
  private static final int __USER2_ISSET_ID = 1;
  private static final int __TIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER1, new org.apache.thrift.meta_data.FieldMetaData("user1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.USER2, new org.apache.thrift.meta_data.FieldMetaData("user2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LAST_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("lastMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Room.class, metaDataMap);
  }

  public Room() {
  }

  public Room(
    int user1,
    int user2,
    java.lang.String lastMessage,
    long timestamp)
  {
    this();
    this.user1 = user1;
    setUser1IsSet(true);
    this.user2 = user2;
    setUser2IsSet(true);
    this.lastMessage = lastMessage;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Room(Room other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user1 = other.user1;
    this.user2 = other.user2;
    if (other.isSetLastMessage()) {
      this.lastMessage = other.lastMessage;
    }
    this.timestamp = other.timestamp;
  }

  public Room deepCopy() {
    return new Room(this);
  }

  @Override
  public void clear() {
    setUser1IsSet(false);
    this.user1 = 0;
    setUser2IsSet(false);
    this.user2 = 0;
    this.lastMessage = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public int getUser1() {
    return this.user1;
  }

  public Room setUser1(int user1) {
    this.user1 = user1;
    setUser1IsSet(true);
    return this;
  }

  public void unsetUser1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER1_ISSET_ID);
  }

  /** Returns true if field user1 is set (has been assigned a value) and false otherwise */
  public boolean isSetUser1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER1_ISSET_ID);
  }

  public void setUser1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER1_ISSET_ID, value);
  }

  public int getUser2() {
    return this.user2;
  }

  public Room setUser2(int user2) {
    this.user2 = user2;
    setUser2IsSet(true);
    return this;
  }

  public void unsetUser2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER2_ISSET_ID);
  }

  /** Returns true if field user2 is set (has been assigned a value) and false otherwise */
  public boolean isSetUser2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER2_ISSET_ID);
  }

  public void setUser2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLastMessage() {
    return this.lastMessage;
  }

  public Room setLastMessage(@org.apache.thrift.annotation.Nullable java.lang.String lastMessage) {
    this.lastMessage = lastMessage;
    return this;
  }

  public void unsetLastMessage() {
    this.lastMessage = null;
  }

  /** Returns true if field lastMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetLastMessage() {
    return this.lastMessage != null;
  }

  public void setLastMessageIsSet(boolean value) {
    if (!value) {
      this.lastMessage = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Room setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER1:
      if (value == null) {
        unsetUser1();
      } else {
        setUser1((java.lang.Integer)value);
      }
      break;

    case USER2:
      if (value == null) {
        unsetUser2();
      } else {
        setUser2((java.lang.Integer)value);
      }
      break;

    case LAST_MESSAGE:
      if (value == null) {
        unsetLastMessage();
      } else {
        setLastMessage((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER1:
      return getUser1();

    case USER2:
      return getUser2();

    case LAST_MESSAGE:
      return getLastMessage();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER1:
      return isSetUser1();
    case USER2:
      return isSetUser2();
    case LAST_MESSAGE:
      return isSetLastMessage();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Room)
      return this.equals((Room)that);
    return false;
  }

  public boolean equals(Room that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user1 = true;
    boolean that_present_user1 = true;
    if (this_present_user1 || that_present_user1) {
      if (!(this_present_user1 && that_present_user1))
        return false;
      if (this.user1 != that.user1)
        return false;
    }

    boolean this_present_user2 = true;
    boolean that_present_user2 = true;
    if (this_present_user2 || that_present_user2) {
      if (!(this_present_user2 && that_present_user2))
        return false;
      if (this.user2 != that.user2)
        return false;
    }

    boolean this_present_lastMessage = true && this.isSetLastMessage();
    boolean that_present_lastMessage = true && that.isSetLastMessage();
    if (this_present_lastMessage || that_present_lastMessage) {
      if (!(this_present_lastMessage && that_present_lastMessage))
        return false;
      if (!this.lastMessage.equals(that.lastMessage))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + user1;

    hashCode = hashCode * 8191 + user2;

    hashCode = hashCode * 8191 + ((isSetLastMessage()) ? 131071 : 524287);
    if (isSetLastMessage())
      hashCode = hashCode * 8191 + lastMessage.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(Room other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUser1()).compareTo(other.isSetUser1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user1, other.user1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser2()).compareTo(other.isSetUser2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user2, other.user2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastMessage()).compareTo(other.isSetLastMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastMessage, other.lastMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Room(");
    boolean first = true;

    sb.append("user1:");
    sb.append(this.user1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user2:");
    sb.append(this.user2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastMessage:");
    if (this.lastMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.lastMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoomStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoomStandardScheme getScheme() {
      return new RoomStandardScheme();
    }
  }

  private static class RoomStandardScheme extends org.apache.thrift.scheme.StandardScheme<Room> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Room struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user1 = iprot.readI32();
              struct.setUser1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user2 = iprot.readI32();
              struct.setUser2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastMessage = iprot.readString();
              struct.setLastMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Room struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER1_FIELD_DESC);
      oprot.writeI32(struct.user1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER2_FIELD_DESC);
      oprot.writeI32(struct.user2);
      oprot.writeFieldEnd();
      if (struct.lastMessage != null) {
        oprot.writeFieldBegin(LAST_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.lastMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoomTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoomTupleScheme getScheme() {
      return new RoomTupleScheme();
    }
  }

  private static class RoomTupleScheme extends org.apache.thrift.scheme.TupleScheme<Room> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Room struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser1()) {
        optionals.set(0);
      }
      if (struct.isSetUser2()) {
        optionals.set(1);
      }
      if (struct.isSetLastMessage()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUser1()) {
        oprot.writeI32(struct.user1);
      }
      if (struct.isSetUser2()) {
        oprot.writeI32(struct.user2);
      }
      if (struct.isSetLastMessage()) {
        oprot.writeString(struct.lastMessage);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Room struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.user1 = iprot.readI32();
        struct.setUser1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.user2 = iprot.readI32();
        struct.setUser2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastMessage = iprot.readString();
        struct.setLastMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

